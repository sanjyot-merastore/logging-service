trigger: none

pool:
  vmImage: ubuntu-latest

parameters:
  - name: project
    displayName: 'Project Name'
    type: string
    default: 'MeraStore.Services.Logging.SDK'
    values:
      - MeraStore.Services.Logging.SDK

  - name: versionType
    displayName: 'Version Type'
    type: string
    default: 'Build'
    values:
      - New
      - Major
      - Minor
      - Build
      - Pre-Release
      
    # Note: Should only be used once for the initial versioning.
  
  - name: buildOrPublish
    displayName: 'Build or Publish'
    type: string
    default: 'Build'
    values:
      - Build
      - Publish

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

jobs:
# Build and Test job
- job: BuildAndTest
  displayName: Restore and Build Project
  condition: eq('${{ parameters.buildOrPublish }}', 'Build')
  steps:
    - task: DotNetCoreCLI@2
      displayName: DotNet Restore
      inputs:
        command: 'restore'
        projects: '**/${{ parameters.project }}.csproj'
        feedsToUse: 'select'
        vstsFeed: 'd3584f81-ddd5-413c-9dcc-8cf171921ad6/7548fa1b-58c8-45f0-9f9c-9a94233b60d3'
    
    - task: DotNetCoreCLI@2
      displayName: DotNet Build
      inputs:
        command: 'build'
        projects: '**/${{ parameters.project }}.csproj'
        arguments: '--configuration $(buildConfiguration)'


- job: CreateNugetPackage
  displayName: Create Nuget Package
  condition: and(ne('${{ parameters.versionType }}', 'None'), eq('${{ parameters.buildOrPublish }}', 'Publish'))
  variables:
    packageVersion: '' # Placeholder for the calculated version
  steps:
    - task: DotNetCoreCLI@2
      displayName: DotNet Restore
      inputs:
        command: 'restore'
        projects: '**/${{ parameters.project }}.csproj'
        feedsToUse: 'select'
        vstsFeed: 'd3584f81-ddd5-413c-9dcc-8cf171921ad6/7548fa1b-58c8-45f0-9f9c-9a94233b60d3'
      condition: succeeded()
    
    - script: |
        #!/bin/bash

        echo "Starting version calculation..."
        echo "Using the secret: $(System.AccessToken)"
        
        # Get version type from parameters
        versionType="${{ parameters.versionType }}"
        projectName="${{ parameters.project }}"

        echo "Version type selected: $versionType"
        echo "Project selected: $projectName"

        # Get the package ID for the selected project
        packageId='a58b57a8-e951-4682-a821-74a97216d45f'

        if [[ -z "$packageId" ]]; then
            echo "Error: Package ID for project '$projectName' not found."
            exit 1
        fi
        
        if [[ "$versionType" != "New" ]]; then
            ## Fetch the latest version from NuGet feed using the package ID
           
            nugetSource="https://feeds.dev.azure.com/merastore/d3584f81-ddd5-413c-9dcc-8cf171921ad6/_apis/Packaging/Feeds/7548fa1b-58c8-45f0-9f9c-9a94233b60d3/Packages/$packageId"

            echo "Fetching the latest version for package ID: $packageId from $nugetSource"
            

            response=$(curl -s -H "Authorization: Basic $AZURE_PATH" "$nugetSource")
            latestVersion=$(echo "$response" | jq -r '.versions[] | select(.isLatest==true) | .version')
            echo $latestVersion
            # Print the raw response for debugging
            echo "Raw response: $response"

            # Default to 1.0.0 if no latest version is found
            if [[ -z "$latestVersion" ]]; then
                latestVersion="1.0.0"
                echo "No latest version found. Defaulting to $latestVersion"
            else
                echo "Latest version found: $latestVersion"
            fi

            # Split the version into parts
            IFS='.' read -r majorVersion minorVersion buildNumber <<< "$latestVersion"
            echo "Current version parts - Major: $majorVersion, Minor: $minorVersion, Build: $buildNumber"

            preReleaseTag=""
            # Get current timestamp
            timestamp=$(date +%Y%m%d%H%M%S)

            # Determine version based on selected version type
            case "$versionType" in
                Major)
                    ((majorVersion++))
                    minorVersion=0
                    buildNumber=0
                    echo "Incrementing major version to $majorVersion, resetting minor and build to 0"
                    ;;
                Minor)
                    ((minorVersion++))
                    buildNumber=0
                    echo "Incrementing minor version to $minorVersion, resetting build to 0"
                    ;;
                Build)
                    ((buildNumber++))
                    echo "Incrementing build version to $buildNumber"
                    ;;
                Pre-Release)
                    ((buildNumber++))
                    preReleaseTag="-beta-$timestamp"
                    echo "Incrementing build version to $buildNumber and setting pre-release tag to $preReleaseTag"
                    ;;
            esac
        else
            # For 'New' version type
            majorVersion=1
            minorVersion=0
            buildNumber=0
            preReleaseTag=""
            echo "Creating new version: $majorVersion.$minorVersion.$buildNumber"
        fi

        # Construct the version string
        version="$majorVersion.$minorVersion.$buildNumber$preReleaseTag"
        echo "Final calculated version: $version"
        
        # Set the calculated version as a pipeline variable
        echo "##vso[task.setvariable variable=packageVersion]$version"
        echo "Version calculation completed."
        
        # Set the calculated version as a pipeline name
        echo "##vso[build.updatebuildnumber]$projectName-$version"
      displayName: 'Calculate Version Number'

    - task: DotNetCoreCLI@2
      displayName: DotNet Pack
      inputs:
        command: 'pack'
        packagesToPack: '**/${{ parameters.project }}.csproj'
        configuration: '$(buildConfiguration)'
        arguments: '--output $(artifactPath) /p:PackageVersion=$(packageVersion)'

    - task: DotNetCoreCLI@2
      displayName: DotNet Push
      inputs:
        command: 'push'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: 'd3584f81-ddd5-413c-9dcc-8cf171921ad6/7548fa1b-58c8-45f0-9f9c-9a94233b60d3'
    
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifacts
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        TargetPath: '\\${{ parameters.project }}\$(Build.DefinitionName)\$(Build.BuildNumber)'
        publishLocation: 'Container'
  
   # Add this step to create a tag on publish
    - script: |
        echo "Creating git tag for version $(packageVersion)"
        git tag "v$(packageVersion)"
        git push origin "v$(packageVersion)"
      displayName: 'Create Tag and Push'
      condition: eq('${{ parameters.buildOrPublish }}', 'Publish')  # Only if publish selected
